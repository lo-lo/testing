import java.io.*;
import java.net.*;
/**
 * Эта программа представляет собой очень простой вебсервер. Получив
 * HTTPзапрос, она отправляет этот запрос в качестве ответа. Это может
 * быть интересно, например, если вы хотите понять, что именно запрашивает
 * клиент или какие данные передаются при отправке формы.
 **/
public class HttpMirror {
    public static void main(String args[]) {
        try {
            // Получаем порт, по которому будет осуществляться прослушивание
            int port = Integer.parseInt(args[0]);
            // Создаем ServerSocket для прослушивания этого порта.
            ServerSocket ss = new ServerSocket(port);
            // Теперь входим в бесконечный цикл ожидания и обработки подключений.
            for(;;) {
                // Ожидаем подключения клиента. Метод переходит в состояние ожидания
                // соединения; он возвращает уже установленное соединение с клиентом
                Socket client = ss.accept();
                // Получаем потоки ввода и вывода для разговора с клиентом
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(client.getInputStream()));
                PrintWriter out = new PrintWriter(client.getOutputStream());
                // Отправляем наш ответ, используя протокол HTTP 1.0
                out.print("HTTP/1.0 200 \n");            // Коды версии и статуса
                out.print("ContentType: text/plain\n"); // Тип данных
                out.print("\n");                         // Заголовки закончились
                // Теперь считываем HTTPзапрос клиента и возвращаем его клиенту
                // в виде части тела нашего ответа. Клиент не отсоединяется, поэтому мы
                // никогда не получаем EOF. Он, однако, посылает после заголовков
                // пустую строку. Поэтому, когда мы видим пустую строку, мы перестаем
                // читать. Это значит, в частности, что мы не будем возвращать содержимое
                // запросов POST, к примеру. Заметим, что метод readLine()
                // работает с признаками конца строки, принятыми в Unix, Windows и Mac.
                String line;
                while((line = in.readLine()) != null) {
                    if (line.length() == 0) break;
                    out.print(line + "\n");
                }
                // Закрываем объект Socket, разрывая подключение к клиенту, и
                // закрываем потоки ввода и вывода
                out.close();    // Проталкиваем и закрываем поток вывода
                in.close();     // Закрываем поток ввода
                client.close(); // Закрываем сам объект Socket
            } // И возвращаемся к началу цикла, где будем ожидать нового подключения
        }
        // Если чтото не в порядке, печатаем сообщение об ошибке
        catch (Exception e) {
            System.err.println(e);
            System.err.println("Формат: java HttpMirror <port>");
        }
    }
}

